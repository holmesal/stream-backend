// Generated by CoffeeScript 1.6.3
(function() {
  var Models, allowCrossDomain, app, db, express, mongoose;

  express = require('express');

  app = express();

  mongoose = require('mongoose');

  Models = require('./models');

  mongoose.connect("mongodb://nodeserver:Carl123!@ds047198.mongolab.com:47198/carl");

  db = mongoose.connection;

  db.on('error', console.error.bind(console, 'connection error'));

  db.once('open', function() {
    console.log('connected successfully to mongodb');
    return app.listen(80);
  });

  allowCrossDomain = function(req, res, next) {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');
    if (req.method === 'OPTIONS') {
      return res.send(200);
    } else {
      return next();
    }
  };

  app.configure(function() {
    app.use(allowCrossDomain);
    return app.use(express.bodyParser());
  });

  app.get('/', function(req, res) {
    return res.end('Up and running cap\'n!');
  });

  app.get('/user/:userIdOrName', function(req, res) {
    var q;
    q = Models.User.findOne();
    if (req.params.userIdOrName.match(/^[0-9a-fA-F]{24}$/)) {
      q.where('_id').equals(req.params.userIdOrName);
    } else {
      q.where('username').equals(req.params.userIdOrName);
    }
    q.populate({
      path: 'streams',
      select: 'title slug'
    });
    return q.exec(function(err, user) {
      if (err) {
        console.error(err);
        return res.json(500, {
          error: err
        });
      } else {
        return res.json(user);
      }
    });
  });

  app.post('/user', function(req, res) {
    var user;
    user = new Models.User({
      username: req.body.username
    });
    return user.save(function(err, user) {
      if (err) {
        console.error(err);
        return res.json(500, {
          error: err
        });
      } else {
        return res.json(user);
      }
    });
  });

  app.put('/user/:userid', function(req, res) {
    return Models.User.findByIdAndUpdate(req.params.userid, {
      $set: req.body
    }, function(err, user) {
      if (err) {
        console.error(err);
        return res.json(500, {
          error: err
        });
      } else {
        return res.json(user);
      }
    });
  });

  app.get('/stream/:streamIdOrSlug', function(req, res) {
    var q;
    q = Models.Stream.findOne();
    if (req.params.streamIdOrSlug.match(/^[0-9a-fA-F]{24}$/)) {
      q.where('_id').equals(req.params.streamIdOrSlug);
    } else {
      q.where('slug').equals(req.params.streamIdOrSlug);
    }
    q.populate({
      path: 'posts owner',
      options: {
        sort: '-timestamp'
      }
    });
    return q.exec(function(err, stream) {
      if (err) {
        console.error(err);
        return res.json(500, {
          error: err
        });
      } else {
        return res.json(stream);
      }
    });
  });

  app.post('/stream', function(req, res) {
    var owner, stream;
    console.log('creating a new stream');
    owner = '52891ffb22883365e2000002';
    stream = new Models.Stream({
      slug: req.body.slug,
      title: req.body.title,
      owner: owner
    });
    return stream.save(function(err, stream) {
      if (err) {
        console.error(err);
        return res.json(500, {
          error: err
        });
      } else {
        return Models.User.findOne({
          '_id': owner
        }, function(err, user) {
          user.streams.push(stream);
          return user.save(function(err, user) {
            if (err) {
              console.error(err);
              return res.json(500, {
                error: err
              });
            } else {
              return stream.populate('owner', function(err, stream) {
                return res.json(stream);
              });
            }
          });
        });
      }
    });
  });

  app.put('/stream/:streamid', function(req, res) {
    return Models.Stream.findByIdAndUpdate(req.params.streamid, {
      $set: req.body
    }, function(err, stream) {
      if (err) {
        console.error(err);
        return res.json(500, {
          error: err
        });
      } else {
        return res.json(stream);
      }
    });
  });

  app.post('/stream/:streamid/post', function(req, res) {
    return Models.Stream.findOne({
      '_id': req.params.streamid
    }, function(err, stream) {
      var post;
      post = new Models.Post(req.body.post);
      post.stream = stream._id;
      return post.save(function(err, post) {
        if (err) {
          console.error(err);
          return res.json(500, {
            error: err
          });
        } else {
          stream.posts.push(post._id);
          return stream.save(function(err, stream) {
            if (err) {
              console.error(err);
              return res.json(500, {
                error: err
              });
            } else {
              return res.json({
                data: post
              });
            }
          });
        }
      });
    });
  });

  app.put('/post/:postid', function(req, res) {
    return Models.Post.findByIdAndUpdate(req.params.postid, {
      $set: req.body
    }, function(err, post) {
      if (err) {
        console.error(err);
        return res.json(500, {
          error: err
        });
      } else {
        return res.json(post);
      }
    });
  });

}).call(this);
